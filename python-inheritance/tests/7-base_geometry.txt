Test cases for 7-base_geometry module
====================================

Using BaseGeometry
------------------

This is a text file in reStructuredText format. First import
``BaseGeometry`` from the ``7-base_geometry`` module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Now use it:

Basic area method (should raise exception):

    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Valid integer validation:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)

Invalid type - string:

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - float:

    >>> bg.integer_validator("name", 3.14)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - boolean:

    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - list:

    >>> bg.integer_validator("name", [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - tuple:

    >>> bg.integer_validator("name", (1, 2))
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - set:

    >>> bg.integer_validator("name", {1, 2})
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - dictionary:

    >>> bg.integer_validator("name", {"key": "value"})
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Invalid type - None:

    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Zero value:

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
        ...
    ValueError: age must be greater than 0

Negative value:

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
        ...
    ValueError: distance must be greater than 0

Negative value -1:

    >>> bg.integer_validator("value", -1)
    Traceback (most recent call last):
        ...
    ValueError: value must be greater than 0

Large positive number:

    >>> bg.integer_validator("big_number", 1000000)

Missing arguments:

    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Missing one argument:

    >>> bg.integer_validator("name")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Too many arguments:

    >>> bg.integer_validator("name", 1, 2)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given