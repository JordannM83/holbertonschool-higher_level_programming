Test cases for 1-my_list module
===============================

Using MyList
------------

This is a text file in reStructuredText format. First import
``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

Basic functionality:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Empty list:

    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

Single element:

    >>> single = MyList([5])
    >>> single.print_sorted()
    [5]

Negative numbers:

    >>> negative = MyList([-1, -4, -2, -3])
    >>> negative.print_sorted()
    [-4, -3, -2, -1]

Mixed positive and negative:

    >>> mixed = MyList([1, -2, 3, -4, 0])
    >>> mixed.print_sorted()
    [-4, -2, 0, 1, 3]

Duplicate numbers:

    >>> duplicates = MyList([3, 1, 4, 1, 5, 9, 2, 6, 5])
    >>> duplicates.print_sorted()
    [1, 1, 2, 3, 4, 5, 5, 6, 9]

Large list:

    >>> large = MyList([100, 50, 25, 75, 10, 90])
    >>> large.print_sorted()
    [10, 25, 50, 75, 90, 100]

List initialized with values:

    >>> init_list = MyList([9, 3, 7, 1])
    >>> print(init_list)
    [9, 3, 7, 1]
    >>> init_list.print_sorted()
    [1, 3, 7, 9]

Inheritance check:

    >>> isinstance(MyList(), list)
    True

Class check:

    >>> type(MyList())
    <class '1-my_list.MyList'>

Method existence:

    >>> hasattr(MyList, 'print_sorted')
    True