Test cases for 2-matrix_divided module
=====================================

Using matrix_divided
--------------------

This is a text file in reStructuredText format. First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Basic functionality tests:

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

Test with negative numbers:

    >>> matrix = [[-2, -4], [8, -10]]
    >>> print(matrix_divided(matrix, -2))
    [[1.0, 2.0], [-4.0, 5.0]]

Test with floats:

    >>> matrix = [[1.5, 2.5], [4.5, 5.5]]
    >>> print(matrix_divided(matrix, 2.5))
    [[0.6, 1.0], [1.8, 2.2]]

Error cases - Division by zero:

    >>> matrix_divided([[1, 2]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Error cases - Rows with different sizes:

    >>> matrix_divided([[1, 2, 3], [4, 5]], 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Error cases - Invalid matrix:

    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, "2"]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Error cases - Invalid divisor:

    >>> matrix_divided([[1, 2]], "2")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Test with missing arguments:

    >>> matrix_divided([[1, 2, 3]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'
