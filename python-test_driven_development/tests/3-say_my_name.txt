Test cases for 3-say_my_name module
===================================

Using say_my_name
-----------------

This is a text file in reStructuredText format containing comprehensive
test cases for the ``say_my_name`` function.

The ``say_my_name`` function prints "My name is <first_name> <last_name>".
It takes two parameters: first_name (required) and last_name (optional, 
defaults to empty string). Both parameters must be strings.

First import ``say_my_name`` from the ``3-say_my_name`` module:

    >>> say_my_name = __import__('3-say_my_name').say_my_name

Basic usage with two names:
===========================

    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White

    >>> say_my_name("Alice", "Wonderland")
    My name is Alice Wonderland

Basic usage with one name (last_name optional):
===============================================

    >>> say_my_name("Bob")
    My name is Bob 

    >>> say_my_name("Alice")
    My name is Alice 

    >>> say_my_name("x")
    My name is x 

Edge cases with empty strings:
==============================

    >>> say_my_name("", "Smith")
    My name is  Smith

    >>> say_my_name("John", "")
    My name is John 

    >>> say_my_name("", "")
    My name is  

Special characters and numbers in names:
========================================

    >>> say_my_name("Jean-Pierre", "Dupont")
    My name is Jean-Pierre Dupont

    >>> say_my_name("Mary", "O'Connor")
    My name is Mary O'Connor

    >>> say_my_name("José", "García")
    My name is José García

    >>> say_my_name("李", "小明")
    My name is 李 小明

    >>> say_my_name("John123", "Smith456")
    My name is John123 Smith456

    >>> say_my_name("A B C", "X Y Z")
    My name is A B C X Y Z

Long names:
===========

    >>> say_my_name("Supercalifragilisticexpialidocious", "Antidisestablishmentarianism")
    My name is Supercalifragilisticexpialidocious Antidisestablishmentarianism

Names with spaces:
==================

    >>> say_my_name("John Paul", "Smith Jones")
    My name is John Paul Smith Jones

    >>> say_my_name(" John ", " Smith ")
    My name is  John   Smith 

Error cases - first_name not a string:
======================================

    >>> say_my_name(12, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name(None, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name([], "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name({}, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name(True, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name(3.14, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Error cases - last_name not a string:
=====================================

    >>> say_my_name("John", 123)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("John", None)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("John", [])
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("John", {})
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("John", True)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name("John", 2.71)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

Error cases - both parameters not strings:
==========================================

    >>> say_my_name(123, 456)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name(None, None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

Error cases - missing required parameter:
=========================================

    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

Error cases - too many arguments:
=================================

    >>> say_my_name("John", "Smith", "Extra")
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

Keyword arguments:
==================

    >>> say_my_name(first_name="Alice", last_name="Cooper")
    My name is Alice Cooper

    >>> say_my_name(last_name="Brown", first_name="Charlie")
    My name is Charlie Brown

    >>> say_my_name("David", last_name="Lee")
    My name is David Lee

Mixed valid and invalid keyword arguments:
==========================================

    >>> say_my_name(first_name=123, last_name="Smith")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name(first_name="John", last_name=456)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string
